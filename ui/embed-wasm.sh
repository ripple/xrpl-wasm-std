#!/bin/bash
# Script to embed WASM files as hex strings in the UI

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
cd "$REPO_ROOT"

UI_FILE="ui/index.html"
WASM_DIR="examples/target/wasm32v1-none/release"

echo "🔧 Embedding WASM files into UI..."

# Function to convert WASM file to hex string
wasm_to_hex() {
    local wasm_file="$1"
    if [[ -f "$wasm_file" ]]; then
        xxd -p "$wasm_file" | tr -d '\n'
    else
        echo "null"
    fi
}

# Read the current UI file
cp "$UI_FILE" "$UI_FILE.backup"

# Generate the WASM hex strings and example buttons dynamically
echo "📦 Converting WASM files to hex..."

# Find all .wasm files and generate arrays
WASM_FILES=()
WASM_DATA=()
EXAMPLE_BUTTONS=""

if [[ -d "$WASM_DIR" ]]; then
    for wasm_file in "$WASM_DIR"/*.wasm; do
        if [[ -f "$wasm_file" ]]; then
            filename=$(basename "$wasm_file" .wasm)
            WASM_FILES+=("$filename")
            hex_data=$(wasm_to_hex "$wasm_file")
            WASM_DATA+=("$hex_data")

            # Convert filename to display name (snake_case to Title Case)
            display_name=$(echo "$filename" | sed 's/_/ /g' | awk '{for(i=1;i<=NF;i++)sub(/./,toupper(substr($i,1,1)),$i)}1')

            # Generate button HTML
            EXAMPLE_BUTTONS+="                <button class=\"btn btn-small\" onclick=\"loadExample('$filename')\">
                  $display_name
                </button>
"
        fi
    done
fi

echo "📝 Updating UI file..."

# Create the replacement for the EMBEDDED_WASM object
{
    echo "        // Embedded WASM examples as hex strings"
    echo "        // To update these, run: ./ui/embed-wasm.sh"
    echo "        const EMBEDDED_WASM = {"

    for i in "${!WASM_FILES[@]}"; do
        filename="${WASM_FILES[$i]}"
        hex_data="${WASM_DATA[$i]}"
        if [[ $i -eq $((${#WASM_FILES[@]} - 1)) ]]; then
            echo "            $filename: \"$hex_data\""
        else
            echo "            $filename: \"$hex_data\","
        fi
    done

    echo "        };"
} > /tmp/embedded_wasm.js

# Create the replacement for the examples buttons
echo "$EXAMPLE_BUTTONS" > /tmp/example_buttons.html

# Replace both the EMBEDDED_WASM section and example buttons in the UI file
awk '
BEGIN {
    in_embedded_wasm = 0;
    in_example_buttons = 0;
}
/^        \/\/ Embedded WASM examples as hex strings/ {
    in_embedded_wasm = 1;
    # Read and print the replacement
    while ((getline line < "/tmp/embedded_wasm.js") > 0) {
        print line;
    }
    close("/tmp/embedded_wasm.js");
    next;
}
/^        };$/ && in_embedded_wasm {
    in_embedded_wasm = 0;
    next;
}
/^                <!-- Dynamic WASM example buttons - generated by embed-wasm.sh -->/ {
    in_example_buttons = 1;
    print;
    # Read and print the replacement buttons
    while ((getline line < "/tmp/example_buttons.html") > 0) {
        print line;
    }
    close("/tmp/example_buttons.html");
    next;
}
/^                <!-- End dynamic WASM example buttons -->/ && in_example_buttons {
    in_example_buttons = 0;
    print;
    next;
}
in_example_buttons { next; }
!in_embedded_wasm { print; }
' "$UI_FILE.backup" > "$UI_FILE"

# Clean up
rm -f /tmp/embedded_wasm.js /tmp/example_buttons.html "$UI_FILE.backup"

echo "✅ WASM files embedded successfully!"
echo ""
echo "📊 Embedded files:"

# Show information for all embedded files
for filename in "${WASM_FILES[@]}"; do
    wasm_file="$WASM_DIR/$filename.wasm"
    if [[ -f "$wasm_file" ]]; then
        file_size=$(stat -f%z "$wasm_file" 2>/dev/null || stat -c%s "$wasm_file" 2>/dev/null || echo "?")
        echo "  ✓ $filename ($file_size bytes)"
    fi
done

echo ""
echo "🎯 Ready to use! Open ui/index.html and try the Examples tab."
